{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","Form","onSubmit","weatherMethod","className","type","name","placeholder","Weather","city","country","temp","wind","pressure","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","setState","main","sys","speed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0SAceA,EAZF,SAACC,GAAD,OACT,6BACI,mIACA,4GACA,4BACI,mOACA,+HCGGC,EATF,SAACD,GAAD,OACT,6BACI,0BAAME,SAAUF,EAAMG,eAClB,2BAAOC,UAAU,oBAAoBC,KAAK,OAAOC,KAAK,OAAOC,YAAY,gGACzE,4BAAQH,UAAU,wBAAlB,2CCYGI,EAhBC,SAACR,GACb,OACI,6BACKA,EAAMS,MACH,yBAAKL,UAAU,kBACX,0EAAaJ,EAAMS,KAAnB,KAA2BT,EAAMU,SACjC,kGAAiBV,EAAMW,KAAvB,WACA,8DAAWX,EAAMY,KAAjB,kBACA,mJAA0BZ,EAAMa,SAAhC,4CAGR,2BAAIb,EAAMc,SCRhBC,EAAU,mCAyEDC,E,2MArEbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,UAAMM,EACNL,cAAUK,EACVJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,mBAAAC,EAAA,yDACfD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFrB,iCAKSC,MAAM,qDAAD,OAAsDjB,EAAtD,kBAAoEM,EAApE,kBALd,cAKPY,EALO,gBAMMA,EAAQC,OANd,OAMPC,EANO,OAQbC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZrB,KAAMkB,EAAKI,KAAKtB,KAChBF,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKK,IAAIxB,QAClBE,KAAMiB,EAAKjB,KAAKuB,MAChBtB,SAAUgB,EAAKI,KAAKpB,SACpBC,WAAOI,IAhBI,wBAmBX,EAAKc,SAAS,CACZrB,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,UAAMM,EACNL,cAAUK,EACVJ,MAAO,wMAzBE,4C,8HA+Bf,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kCACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMD,cAAeiC,KAAKjB,iBAC1B,kBAAC,EAAD,CACER,KAAMyB,KAAKnB,MAAMN,KACjBF,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBE,KAAMwB,KAAKnB,MAAML,KACjBC,SAAUuB,KAAKnB,MAAMJ,SACrBC,MAAOsB,KAAKnB,MAAMH,iB,GA1DlBuB,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLgB,QAAQhB,MAAMA,EAAMyC,c","file":"static/js/main.f59aed5b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = (props) => (\r\n    <div>\r\n        <h2>Узнать погоду леко!</h2>\r\n        <p>Всего 2 дествия: </p>\r\n        <ol>\r\n            <li>Введите название населенного пункта</li>\r\n            <li>Нажмите на кнопку</li>\r\n        </ol>\r\n    </div>\r\n)\r\n\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => (\r\n    <div>\r\n        <form onSubmit={props.weatherMethod}>\r\n            <input className=\"form-control mb-2\" type=\"text\" name=\"city\" placeholder=\"Населенный пункт\"/>\r\n            <button className=\"btn btn-primary mb-2\">Узнать</button>\r\n        </form>\r\n    </div>\r\n)\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) =>  {\r\n    return (\r\n        <div>\r\n            {props.city &&\r\n                <div className=\"card card-body\">    \r\n                    <p>Погода в {props.city}, {props.country}</p>\r\n                    <p>Температура: {props.temp} &#8451;</p>\r\n                    <p>Ветер: {props.wind} м/с</p>\r\n                    <p>Атмосферное давление: {props.pressure} мм.рт.ст</p>\r\n                </div>\r\n            }\r\n            <p>{props.error}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Info from './components/Info';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\n\r\nconst API_KEY = '8c849261b5d7f9a96498c6b1d0a1aa3f';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    wind: undefined,\r\n    pressure: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    \r\n    if(city){\r\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\r\n      const data = await api_url.json();\r\n\r\n      console.log(data);\r\n\r\n      this.setState({\r\n        temp: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        wind: data.wind.speed,\r\n        pressure: data.main.pressure,\r\n        error: undefined\r\n      });\r\n    } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          wind: undefined,\r\n          pressure: undefined,\r\n          error: 'Введите название населенного пункта'\r\n        });\r\n      }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-lg-5 info card-body\">\r\n                <Info />\r\n              </div>\r\n              <div className=\"col-12 col-lg-7 form\">\r\n                <Form weatherMethod={this.gettingWeather} />\r\n                <Weather \r\n                  temp={this.state.temp}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  wind={this.state.wind}\r\n                  pressure={this.state.pressure}\r\n                  error={this.state.error}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}